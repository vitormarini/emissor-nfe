<?php    /************************************    *          Osvaldo Cruz/SP          *    *                                   *    * Criacao.: 08/08/2018              *        * Versao.: 1.0.0                    *    ************************************/    //Tipo de report de erros    error_reporting(E_ERROR);            //Includes obrigatórios    require_once "adodb/adodb-exceptions.inc.php";    require_once "adodb/adodb.inc.php";        //Inicia sessão    session_start();            //Realiza conexão persistente com o banco de dados//    $bd = $objBDNovo = novaConexao("banco", "endereço e porta 192.168.50.126:3040", "base", "login", "senha");               /**     * Realiza conexão persistente com o banco de dados     * @param String $banco Sistema gerenciador utilizado. Ex: postgres     * @param String $host Link do servidor. Porta padrão sempre utilizada. Caso necessário passar a porta junto. Ex: localhost:5432     * @param String $base Nome da base a ser utilizada     * @param String $usuario Nome do usuário para estabelecer a conexão     * @param String $senha Senha para autenticação no banco de dados     * @return ADONewConnection Objeto de conexão com o banco de dados      */    function novaConexao($banco, $host, $base, $usuario, $senha){                //Dados de conexão        $conexao               = ADONewConnection($banco);         $conexao->debug        = false;        $conexao->autoRollback = true;        $conexao->dialect      = 3;        $conexao->Connect($host, $usuario, $senha, $base);                //Verifica se conexão foi estabelecida        if(!$conexao->IsConnected())            exit(htmlentities("[ERRO] Não foi possível conectar ao banco de dados! Por favor, contate o administrador do sistesma."));                //Previne erros de codificação - Postgres        $conexao->Execute("SET NAMES 'utf8'");        $conexao->Execute("SET CLIENT_ENCODING TO utf8");                //Caso a base seja em mysql        //$conexao->Execute("SET NAMES 'utf8'");        //$conexao->Execute('SET character_set_connection = utf8');        //$conexao->Execute('SET CLIENT_ENCODING TO utf8');        //$conexao->Execute('SET character_set_results = utf8');                return $conexao;    }    /**     * Retira caracteres especiais da string passada     * @param String $texto texto que contem os caracteres especiais     * @return String Retorna a string com os respectivos correspondentes para os caracteres especiais     */    function retiraAcentos($texto){                $original = array(            "á",   "à",   "â", "ã", "ä", "é", "è", "ê", "ë", "í", "ì", "î", "ï", "ó", "ò",             "ô",   "õ",   "ö", "ú", "ù", "û", "ü", "ç", "ª", "º", "Á", "À", "Â", "Ã", "Ä",             "É",   "È",   "Ê", "Ë", "Í", "Ì", "Î", "Ï", "Ó", "Ò", "Ô", "Õ", "Ö", "Ú", "Ù",            "Û",   "Ü",   "Ç", "(", ")", "<", ">", ";", "?", "*", "&", "%", "#", "@", "!",            "ï¿½", "i¿½", "$", "{", "}", "[", "]", "=", "'", "´", ","        );                $troca = array(            "a", "a", "a", "a", "a", "e", "e", "e", "e", "i", "i", "i", "i", "o", "o",            "o", "o", "o", "u", "u", "u", "u", "c", "a", "o", "A", "A", "A", "A", "A",            "E", "E", "E", "E", "I", "I", "I", "I", "O", "O", "O", "O", "O", "U", "U",             "U", "U", "C", "",  "",  "",  "",  "",  "",  "",  "",  "",  "",  "",  "",              "a", "a", "",  "",  "",  "",  "",  "",  "",  "",  ""        );        return str_replace($original, $troca, $texto);    }        /**     * Formata o valor passado     * @deprecated Será retirada em breve. Utilize as funções de moeda e number_format para mesmo fim.     * @param String $valor Valor a ser formatado     * @return string Valor formatado     */    function formataValores($valor){                switch(strlen($valor)){            case 4 : $valor = substr($valor, 0, 2) . "," . substr($valor, 2, 2); break;            case 5 : $valor = substr($valor, 0, 3) . "," . substr($valor, 3, 2); break;            case 6 : $valor = substr($valor, 0, 1) . "." . substr($valor, 1, 3) . "," . substr($valor, 4, 2); break;        }                return $valor;            }        /**     * Retira possíveis espaços dos valores passados por $_POST     */    function retiraEspacos(){        foreach($_POST as $chave => $valor){            $_POST[$chave] = trim($valor);        }    }        /**     * Converte caracteres     */    function converteCaracteres(){        retiraEspacos();        foreach($_POST as $chave => $valor ){            $_POST[$chave] = utf8_decode(str_replace("'", "", $valor));        }    }        /**     * Retira palavras reservadas, evitando SQL Injection.     * @param String $texto String a ser tratada     * @return String Retorna string tratada     */    function limparTexto($texto){        converteCaracteres();//        $texto = preg_replace(sql_regcase("/(from|select|insert|delete|where|drop table|show tables|--|\\\\)/" ), "", $texto);//        $texto = addslashes(strip_tags(trim($texto)));        $strTexto = preg_replace( "/(from|select|insert|delete|where|drop table|show tables|#|\*|--|\\\\)/i", "", $strTexto );        $strTexto = str_replace( array( "<", ">", "\\", "/", "=", "'", "?" ), "", $strTexto );        $strTexto = trim( $strTexto );        $strTexto = strip_tags( $strTexto );        $strTexto = addslashes( $strTexto );        return $texto;    }        /**     * Coloca todos os valores do $_POST em maiúsculo     */    function colocaMaiusculo(){        foreach($_POST as $chave => $valor){            $_POST[$chave] = strtoupper($valor);        }    }